//
// Created by jishu on 22-09-2025.
//find Shortest path in Directed Acyclic Weighted Graph
#include<iostream>
#include <stack>
#include <vector>
#include <unordered_map>
using namespace std;
void DFS(int node,vector<vector<pair<int,int>>>&Adj,vector<bool>&visited,stack<int>&st) {
    visited[node]=1;
    for (int i=0;i<Adj[node].size();i++) {
        if (!visited[Adj[node][i].first])
            DFS(Adj[node][i].first,Adj,visited,st);
    }
    st.push(node);
}
vector<int>shortest_paths(vector<vector<int>>&Edges,int v,int e) {
    vector<vector<pair<int,int>>>Adj(v);
    //first we will create an Adjacent Matrix
    for (int i=0;i<Edges.size();i++) {
        Adj[Edges[i][0]].push_back(make_pair(Edges[i][1],Edges[i][2]));
    }
    vector<int>Dist(v,INT_MAX);
    Dist[0]=0;
    vector<bool>visited(v,0);
    stack<int>st;
    DFS(0,Adj,visited,st);
    while (!st.empty()) {
        int node=st.top();
        st.pop();
        for (int i=0;i<Adj[node].size();i++) {
            int u=Adj[node][i].first;
            int weight=Adj[node][i].second;
            Dist[u]=min(Dist[u],Dist[node]+weight);
        }
    }
    for (int i=0;i<v;i++) {
        if (Dist[i]==INT_MAX)
            Dist[i]=-1;
    }
    return Dist;
}
int main() {
    vector<int>vertex={4,6,23,32};
    vector<int>Edges={2,7,124,267};
    vector<vector<vector<int>>>edges={ {{0,1,2}, {0,2,1}},{{0,1,2}, {0,4,1}, {4,5,4}, {4,2,2}, {1,2,3}, {2,3,6}, {5,3,1}},{
 {19, 22, 76928}, {7, 22, 90263}, {12, 18, 14591}, {9, 14, 11328}, {6, 13, 37429},
 {6, 22, 43846}, {5, 13, 31292}, {4, 6, 99924}, {15, 19, 84731}, {1, 15, 87990},
 {0, 9, 24192}, {14, 22, 62205}, {0, 18, 62765}, {4, 8, 51096}, {10, 15, 2869},
 {4, 12, 19526}, {0, 7, 30563}, {1, 9, 98874}, {15, 16, 19212}, {12, 19, 50949},
 {3, 8, 75634}, {10, 14, 72718}, {18, 20, 49687}, {3, 20, 78563}, {16, 21, 80242},
 {8, 16, 82364}, {10, 21, 93227}, {2, 4, 8283}, {7, 10, 79502}, {12, 16, 11172},
 {2, 22, 81911}, {8, 20, 86166}, {11, 16, 9363}, {2, 11, 44717}, {4, 15, 28234},
 {14, 21, 28427}, {3, 7, 20333}, {6, 7, 2100}, {7, 14, 34620}, {15, 22, 68309},
 {13, 18, 26905}, {7, 17, 48752}, {19, 21, 33654}, {8, 18, 52786}, {1, 14, 5645},
 {0, 14, 62562}, {11, 20, 27846}, {3, 19, 68934}, {16, 19, 42664}, {0, 17, 4119},
 {13, 14, 27043}, {0, 12, 92720}, {18, 22, 31363}, {7, 18, 4040}, {6, 19, 68869},
 {2, 15, 1851}, {11, 12, 50673}, {9, 19, 67464}, {3, 21, 73271}, {4, 21, 94065},
 {10, 20, 66970}, {1, 19, 60187}, {0, 15, 20829}, {17, 22, 62231}, {15, 20, 49764},
 {3, 17, 83640}, {2, 9, 59308}, {11, 13, 52759}, {16, 20, 6436}, {10, 11, 50425},
 {2, 20, 72007}, {5, 11, 84111}, {5, 9, 5743}, {10, 16, 27025}, {1, 4, 21194},
 {6, 20, 25326}, {6, 10, 24186}, {3, 13, 41547}, {5, 12, 24090}, {2, 18, 73384},
 {8, 13, 12639}, {12, 21, 71173}, {4, 20, 27989}, {8, 15, 44127}, {9, 21, 22929},
 {3, 15, 21963}, {0, 11, 38635}, {7, 19, 85353}, {15, 18, 68028}, {11, 21, 40364},
 {1, 20, 48814}, {0, 19, 96735}, {9, 15, 16165}, {10, 22, 37359}, {1, 17, 33364},
 {7, 9, 2500}, {18, 21, 60938}, {13, 21, 20986}, {2, 16, 3138}, {5, 20, 77747},
 {12, 14, 4212}, {14, 15, 16439}, {9, 18, 55853}, {2, 21, 78109}, {0, 2, 15586},
 {6, 21, 24710}, {14, 16, 20689}, {1, 11, 12061}, {4, 16, 45704}, {13, 19, 7855},
 {2, 7, 94453}, {2, 8, 34573}, {12, 20, 25166}, {0, 16, 73509}, {11, 19, 34054},
 {3, 11, 44548}, {8, 9, 43258}, {9, 10, 50922}, {13, 20, 25109}, {4, 18, 60958},
 {4, 14, 2004}, {1, 13, 57373}, {2, 12, 31555}, {0, 21, 1710}
},{
 {19, 25, 77866}, {15, 25, 89043}, {8, 14, 38954}, {7, 26, 64023}, {21, 27, 22851},
 {4, 21, 98018}, {6, 18, 8297}, {14, 24, 86835}, {0, 15, 66902}, {7, 29, 22985},
 {1, 5, 36544}, {9, 28, 88709}, {12, 25, 33120}, {1, 22, 72058}, {3, 8, 75901},
 {4, 8, 89482}, {0, 13, 96451}, {16, 26, 28365}, {2, 22, 88547}, {2, 30, 15673},
 {19, 26, 79812}, {12, 28, 28674}, {14, 18, 22189}, {10, 19, 30233}, {2, 25, 11524},
 {17, 26, 37905}, {5, 11, 84821}, {6, 16, 48163}, {3, 11, 99520}, {0, 26, 78220},
 {4, 7, 94949}, {7, 23, 16561}, {12, 24, 84674}, {0, 23, 30191}, {5, 23, 68144},
 {10, 12, 91593}, {20, 25, 74586}, {14, 30, 56902}, {3, 9, 34515}, {8, 21, 83538},
 {18, 21, 90772}, {15, 20, 52334}, {2, 11, 93061}, {16, 17, 38864}, {2, 14, 92111},
 {17, 21, 91763}, {4, 22, 63307}, {19, 27, 29611}, {2, 12, 21831}, {21, 31, 78784},
 {11, 29, 13049}, {6, 17, 10739}, {23, 26, 83860}, {1, 9, 54452}, {9, 13, 44720},
 {18, 27, 21615}, {8, 20, 99286}, {7, 20, 9828}, {10, 14, 98050}, {6, 13, 50119},
 {1, 26, 74772}, {0, 22, 33594}, {11, 17, 74795}, {19, 20, 34756}, {9, 20, 59674},
 {18, 28, 68771}, {19, 23, 2741}, {15, 29, 42457}, {5, 28, 46916}, {10, 20, 84667},
 {17, 27, 67473}, {9, 12, 5584}, {16, 28, 91148}, {3, 13, 25286}, {24, 26, 47906},
 {22, 25, 32031}, {5, 17, 26578}, {6, 30, 94964}, {17, 24, 85017}, {1, 23, 31347},
 {0, 11, 70283}, {8, 17, 42248}, {22, 24, 22173}, {13, 24, 20658}, {20, 23, 42415},
 {4, 23, 25604}, {2, 16, 81468}, {10, 29, 67492}, {4, 18, 88219}, {13, 23, 73635},
 {0, 28, 60486}, {15, 27, 58939}, {9, 29, 21654}, {18, 29, 41685}, {5, 25, 88974},
 {19, 29, 15657}, {1, 6, 13145}, {12, 23, 13188}, {21, 28, 68872}, {18, 26, 18835},
 {8, 23, 57288}, {7, 13, 15442}, {17, 31, 17682}, {0, 19, 19272}, {10, 17, 22549},
 {1, 12, 19871}, {2, 9, 58941}, {3, 29, 46397}, {16, 22, 53592}, {4, 19, 26671},
 {20, 24, 61652}, {9, 19, 12591}, {1, 14, 64006}, {10, 26, 53561}, {6, 20, 62201},
 {7, 28, 50666}, {8, 19, 16127}, {11, 21, 7876}, {1, 11, 80272}, {2, 29, 98792},
 {17, 18, 99537}, {15, 23, 14489}, {6, 23, 21955}, {0, 31, 25565}, {13, 25, 31067},
 {10, 30, 46878}, {9, 26, 83284}, {0, 16, 29702}, {3, 25, 50349}, {21, 29, 69202},
 {0, 27, 26666}, {20, 29, 9008}, {0, 25, 21871}, {4, 17, 69371}, {11, 20, 78274},
 {22, 30, 46509}, {14, 27, 10030}, {5, 10, 85320}, {4, 25, 74045}, {5, 18, 92166},
 {6, 15, 70421}, {6, 14, 48993}, {23, 31, 29122}, {0, 9, 57677}, {3, 17, 27277},
 {9, 25, 52566}, {5, 14, 79914}, {3, 12, 2787}, {12, 31, 34940}, {15, 24, 57004},
 {2, 20, 91143}, {8, 18, 89856}, {14, 15, 54783}, {10, 27, 77872}, {6, 19, 3690},
 {2, 27, 75955}, {8, 28, 89113}, {7, 16, 19788}, {20, 30, 61280}, {9, 21, 77442},
 {12, 26, 13615}, {17, 28, 80055}, {4, 29, 23812}, {19, 24, 42364}, {2, 28, 37749},
 {5, 19, 76445}, {2, 8, 7699}, {8, 15, 18156}, {16, 25, 36711}, {5, 27, 42267},
 {3, 21, 29254}, {14, 28, 84964}, {1, 19, 13940}, {5, 16, 95667}, {0, 18, 25487},
 {9, 14, 14236}, {10, 23, 9811}, {7, 12, 35547}, {11, 23, 56036}, {10, 25, 85884},
 {19, 21, 61996}, {1, 17, 18567}, {20, 31, 82517}, {9, 30, 44576}, {3, 28, 55897},
 {14, 31, 36040}, {12, 29, 92909}, {16, 23, 49970}, {7, 17, 31134}, {3, 31, 47002},
 {4, 9, 6249}, {16, 30, 61259}, {3, 24, 31461}, {5, 13, 46810}, {6, 12, 52568},
 {0, 20, 87237}, {2, 19, 52423}, {19, 31, 50243}, {7, 25, 51343}, {12, 15, 82843},
 {0, 14, 5853}, {5, 31, 24062}, {18, 25, 37706}, {1, 8, 79019}, {1, 7, 78920},
 {0, 12, 51008}, {18, 23, 83363}, {13, 18, 60514}, {11, 25, 66559}, {17, 25, 98687},
 {13, 21, 51688}, {1, 30, 83265}, {14, 19, 85345}, {13, 31, 77508}, {8, 29, 86626},
 {2, 7, 59818}, {5, 29, 80588}, {15, 28, 95506}, {2, 18, 18401}, {0, 6, 18138},
 {6, 31, 87816}, {7, 24, 16665}, {18, 31, 35327}, {8, 25, 88540}, {11, 27, 69994},
 {2, 23, 12395}, {7, 30, 25936}
}};
    for (int i=0;i<4;i++) {
        vector<int>ans=shortest_paths(edges[i],vertex[i],Edges[i]);
        for (int j=0;j<ans.size();j++) {
            cout<<ans[j]<<" ";
        }
        cout<<endl;
    }
}
